version: 'Setup-SqlServers.ps1 Test {build}'
max_jobs: 1
image:
# SQL Server 2019 needs the Visual Studio 2019 image
- Visual Studio 2017
# - Visual Studio 2022

environment:
  global:

      SYSTEM_ARTIFACTSDIRECTORY: 'C:\Artifacts'
      PS1_TROUBLE_SHOOT: On
      SQLSERVERS_MEDIA_FOLDER: 'C:\SQL-Media'
      SQLSERVERS_SETUP_FOLDER: 'C:\SQL-Setup'
      TEMP: 'C:\Temp'

  matrix:

          - SqlServers: '2022 LocalDB'
          - SqlServers: '2012-x64 Developer'
          - SqlServers: '2022 Developer Update'
          - SqlServers: '2022 Developer'
          - SqlServers: '2022 Advanced Update'
          - SqlServers: '2022 Advanced'
          - SqlServers: '2022 Core Update'
          - SqlServers: '2022 Core'
          - SqlServers: '2019 Developer Update'
          - SqlServers: '2019 Developer'
          - SqlServers: '2019 Advanced Update'
          - SqlServers: '2019 Advanced'
          - SqlServers: '2019 Core Update'
          - SqlServers: '2019 Core'
          - SqlServers: '2019 LocalDB'
          - SqlServers: '2017 Developer Update'
          - SqlServers: '2017 Developer'
          - SqlServers: '2017 Advanced Update'
          - SqlServers: '2017 Advanced'
          - SqlServers: '2017 Core Update'
          - SqlServers: '2017 Core'
          - SqlServers: '2017 LocalDB'
          - SqlServers: '2016 Developer Update'
          - SqlServers: '2016 Developer'
          - SqlServers: '2016 Advanced Update'
          - SqlServers: '2016 Advanced'
          - SqlServers: '2016 Core Update'
          - SqlServers: '2016 Core'
          - SqlServers: '2016 LocalDB'
          - SqlServers: '2014-x64 Developer'
          - SqlServers: '2014-x64 Advanced'
          - SqlServers: '2014-x64 Core'
          - SqlServers: '2014-x64 LocalDB'
          - SqlServers: '2014-x86 Advanced'
          - SqlServers: '2014-x86 Core'
          - SqlServers: '2014-x86 LocalDB'

          - SqlServers: '2012-x64 Advanced'
          - SqlServers: '2012-x64 Core'
          - SqlServers: '2012-x64 LocalDB'
          - SqlServers: '2012-x86 Developer'
          - SqlServers: '2012-x86 Advanced'
          - SqlServers: '2012-x86 Core'
          - SqlServers: '2012-x86 LocalDB'
          - SqlServers: '2008R2-x64 Developer'
          - SqlServers: '2008R2-x64 Advanced Update'
          - SqlServers: '2008R2-x64 Advanced'
          - SqlServers: '2008R2-x64 Core Update'
          - SqlServers: '2008R2-x64 Core'
          - SqlServers: '2008R2-x86 Developer'
          - SqlServers: '2008R2-x86 Advanced Update'
          - SqlServers: '2008R2-x86 Advanced'
          - SqlServers: '2008R2-x86 Core Update'
          - SqlServers: '2008R2-x86 Core'
          - SqlServers: '2008-x64 Advanced Update'
          - SqlServers: '2008-x64 Advanced'
          - SqlServers: '2008-x64 Core Update'
          - SqlServers: '2008-x64 Core'
          - SqlServers: '2008-x86 Advanced Update'
          - SqlServers: '2008-x86 Advanced'
          - SqlServers: '2008-x86 Core Update'
          - SqlServers: '2008-x86 Core'
          - SqlServers: '2005-x86 Advanced Update'
          - SqlServers: '2005-x86 Advanced'
          - SqlServers: '2005-x86 Core'

init:
- ps: |
      New-Item -Path "$($ENV:HOME)\.ssh" -ItemType Directory -Force -EA SilentlyContinue | Out-Null
      echo "Host *`r`n   StrictHostKeyChecking no\`r`n   UserKnownHostsFile=/dev/null`r`n" | Out-File -Encoding ASCII "$($ENV:HOME)\.ssh\config"
      get-content -Raw ~/.ssh/config
      echo ""
      scp -v
      New-Item -Path "C:\Artifacts" -ItemType Directory -Force -EA SilentlyContinue | Out-Null
      New-Item -Path "C:\Temp" -ItemType Directory -Force -EA SilentlyContinue | Out-Null
      Write-Host "CPU: $((Get-WmiObject Win32_Processor).Name), $([System.Environment]::ProcessorCount) Cores"
      Write-Host "OS: $((Get-WmiObject Win32_OperatingSystem | select -Property Caption | Select -First 1).Caption)"
      get-wmiobject win32_service | where {$_.Name -Like "MSSQL`$*" } | % { 
        echo "DELETING MSSQL SERVER SERVICE [$($_.Name)]";
        if ("$($_.State)" -ne "Stopped") { & net.exe stop $_.Name; };
        & sc.exe delete $_.Name;
      }
      gdr -PSProvider 'FileSystem' | Format-Table -AutoSize | Out-String -Width 2048
      # & cmd.exe /c "printenv | sort"

build_script:

- ps: |
      cd Scripts
      if ("$($ENV:SqlServers)" -match "LocalDB") { & powershell.exe -f Uninstall-LocalDB.ps1; } else { Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server Local DB\Installed Versions" -Recurse -Force -EA SilentlyContinue; }
      powershell -f Force-Install-Aria2c.ps1
      
- ps: |
      $ENV:DEBUG_LOG_FOLDER = "$($ENV:APPVEYOR_BUILD_FOLDER)\Benchmark"
      powershell -f Setup-SqlServers.ps1 -SqlServers "$($ENV:SqlServers)"
      get-wmiobject win32_service | where {$_.Name.ToLower().IndexOf("sql") -ge 0 -or $_.Name -match "browser" -or $_.DisplayName -match "browser"  } | sort-object -Property "DisplayName" | ft State, Name, DisplayName, StartMode, StartName -AutoSize | Out-String -Width 2048
      
test_script:
- ps: |
      & 7z.exe x LocalSqlDiscovery-net4.5.7z -oc:\Temp\ > $null
      pushd c:\Temp\LocalSqlDiscovery-net4.5
      $outputFile = "SHOW-SQL-Servers.log"
      & .\SHOW-SQL-Servers.cmd *| tee "$outputFile"

      $isOk = (Get-Content "c:\Temp\LocalSqlDiscovery-net4.5\SHOW-SQL-Servers.log") -match "Medium Version";
      $mediumVersion = "$isOk".Split(":") | Select -Last 1;
      $mediumVersion = "$mediumVersion".Trim();
      Write-Host "IS OK: $isOk, mediumVersion: '$mediumVersion'"

      $reportJsonFullName = "$($ENV:APPVEYOR_BUILD_FOLDER)\Benchmark\SQL Setup Benchmark.json"
      $jsonObject = [PSCustomObject] (Get-Content -Raw $reportJsonFullName | ConvertFrom-Json)
      $jsonObject | Add-Member -MemberType NoteProperty -Name "MediumVersion" -Value $mediumVersion
      $jsonObject | ConvertTo-Json | Out-File $reportJsonFullName -Force
      popd

      if ("$($ENV:SqlServers)" -match "LocalDB") {
        if (-not $isOk) { throw "LocalDB Not Found or Not Responding"; }
      } else {
        $sqlServers = @(get-wmiobject win32_service | where {$_.Name -Like "MSSQL`$*" })
        if ($sqlServers.Count -lt 1) { throw "At least *One* SQL Server Expected"; }
      }

      & 7z.exe a -t7z -y "$($ENV:APPVEYOR_BUILD_FOLDER)\$($ENV:SqlServers) Benchmark.result7z" "$reportJsonFullName"

artifacts:
  - path: 'Benchmark\SQL Setup Benchmark.json'
  - path: '/.*\.result7z/'

deploy:
  provider: FTP
  protocol: sftp
  host: frs.sourceforge.net
  username:
    secure: RkMxCcW3KL9W3bEDCWa1vQ==
  password:
    secure: LsWN2NVplPFnCfZUOg7TIA==
  folder: /home/frs/p/gcc-precompiled/summary/sql-server-app-veyor/
  artifact: '/.*\.result7z/'