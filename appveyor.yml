version: 'Setup-SqlServers.ps1 Test {build}'
max_jobs: 1
image:
# SQL Server 2019 needs the Visual Studio 2019 image
- Visual Studio 2017
- Visual Studio 2022

environment:
  global:

      SYSTEM_ARTIFACTSDIRECTORY: 'C:\Artifacts'
      PS1_TROUBLE_SHOOT: On
      SQLSERVERS_MEDIA_FOLDER: 'C:\SQL-Media'
      SQLSERVERS_SETUP_FOLDER: 'C:\SQL-Setup'

  matrix:

    - SqlServers: '2022 Core'
    - SqlServers: '2022 LocalDB'
    - SqlServers: '2022 Developer'

init:
- ps: |
      Write-Host "CPU: $((Get-WmiObject Win32_Processor).Name), $([System.Environment]::ProcessorCount) Cores"
      get-wmiobject win32_service | where {$_.Name -Like "MSSQL`$*" } | % { 
        echo "DELETING MSSQL SERVER SERVICE [$($_.Name)]";
        if ("$($_.State)" -ne "Stopped") { & net.exe stop $_.Name; };
        & sc.exe delete $_.Name;
      }
      gdr -PSProvider 'FileSystem' | Format-Table -AutoSize | Out-String -Width 2048
      & cmd.exe /c "printenv | sort"
      New-Item -Path "C:\Artifacts" -ItemType Directory -Force -EA SilentlyContinue | Out-Null

build_script:

- ps: |
      cd Scripts
      if ("$($ENV:SqlServers)" -match "LocalDB") { & powershell.exe -f Uninstall-LocalDB.ps1; } else { Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server Local DB\Installed Versions" -Recurse -Force -EA SilentlyContinue; }
      
- ps: |
      powershell -f Setup-SqlServers.ps1 -SqlServers "$($ENV:SqlServers)" 
      get-wmiobject win32_service | where {$_.Name.ToLower().IndexOf("sql") -ge 0 -or $_.Name -match "browser" -or $_.DisplayName -match "browser"  } | sort-object -Property "DisplayName" | ft State, Name, DisplayName, StartMode, StartName -AutoSize | Out-String -Width 2048
      
test_script:
- ps: |
      & 7z.exe x LocalSqlDiscovery-net4.5.7z -oc:\Temp\ > $null
      pushd c:\Temp\LocalSqlDiscovery-net4.5
      $outputFile = "SHOW-SQL-Servers.log"
      & .\SHOW-SQL-Servers.cmd *| tee "$outputFile"
      popd

      $isOk = (Get-Content "c:\Temp\LocalSqlDiscovery-net4.5\SHOW-SQL-Servers.log") -match "Medium Version";
      Write-Host "IS OK: $isOk"
      if ("$($ENV:SqlServers)" -match "LocalDB") {
        #???????? Check up LocalDB Is Installed
        if (-not $isOk) { throw "LocalDB Not Found or Not Responding"; }
      } else {
        $sqlServers = @(get-wmiobject win32_service | where {$_.Name -Like "MSSQL`$*" })
        if ($sqlServers.Count -gt 1) { throw "At least *One* SQL Server Expected"; }
      }

