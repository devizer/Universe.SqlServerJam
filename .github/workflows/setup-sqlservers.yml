name: Setup SQL Servers

on:
  workflow_dispatch:
  push:
      branches: [ "master" ]
  schedule:
      - cron: "15 4 * * *"

defaults:
  run:
    shell: powershell


jobs:

  Pre-Build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - name: dotnet build
      shell: bash
      run: |
        set -eu; set -o pipefail
        script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
        Say --Reset-Stopwatch
        Say "CPU: $(Get-CpuName)"
        
        Say "Build fx-dependent [https://github.com/devizer/Universe.SqlInsights].Tests"
        try-and-retry git clone https://github.com/devizer/Universe.SqlInsights ~/Universe.SqlInsights-Sources
        pushd ~/Universe.SqlInsights-Sources/src/Universe.SqlInsights.SqlServerStorage.Tests
        bindir="${{ github.workspace }}/bin/Universe.SqlInsights.SqlServerStorage.Tests"
        time try-and-retry dotnet publish -c Release -o "$bindir" -f net6.0 -v:m
        popd
        ls -lah "$bindir"
        echo "bindir=[$bindir]"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: 'Binaries'
        path: bin
        # path: "${{ runner.temp }}/Artifacts/**/**"
          
  
  Setup:

    timeout-minutes: 45
    needs: Pre-Build
    strategy:
      fail-fast: false
      matrix:
        SqlServers: [
           # '2022 Developer, 2008 Core, 2005 Core',
           # '2022 Developer, 2019 Developer, 2017 Developer, 2016 Developer',
           # '2022 Developer Update, 2019 Developer Update, 2017 Developer Update, 2016 Developer Update',
           '2022 Developer Update',
           '2022 Developer',
           '2022 Advanced Update',
           '2022 Advanced',
           '2022 Core Update',
           '2022 Core',
           '2022 LocalDB',
           '2019 Developer Update',
           '2019 Developer',
           '2019 Advanced Update',
           '2019 Advanced',
           '2019 Core Update',
           '2019 Core',
           '2019 LocalDB',
           '2017 Developer Update',
           '2017 Developer',
           '2017 Advanced Update',
           '2017 Advanced',
           '2017 Core Update',
           '2017 Core',
           '2017 LocalDB',
           '2016 Developer Update',
           '2016 Developer',
           '2016 Advanced Update',
           '2016 Advanced',
           '2016 Core Update',
           '2016 Core',
           '2016 LocalDB',
           '2014-x64 Developer',
           '2014-x64 Advanced',
           '2014-x64 Core',
           '2014-x64 LocalDB',
           '2014-x86 Developer', 
           '2014-x86 Advanced',
           '2014-x86 Core',
#           '2014-x86 LocalDB',
           '2012-x64 Developer',
           '2012-x64 Advanced',
           '2012-x64 Core',
           '2012-x64 LocalDB',
           '2012-x86 Developer',
           '2012-x86 Advanced',
           '2012-x86 Core',
#           '2012-x86 LocalDB',
           '2008R2-x64 Developer',
           '2008R2-x64 Advanced Update',
           '2008R2-x64 Advanced',
           '2008R2-x64 Core Update',
           '2008R2-x64 Core',
           '2008R2-x86 Developer',
           '2008R2-x86 Advanced Update',
           '2008R2-x86 Advanced',
           '2008R2-x86 Core Update',
           '2008R2-x86 Core',
           '2008-x64 Developer Update',
           '2008-x64 Developer',
           '2008-x64 Advanced Update',
           '2008-x64 Advanced',
           '2008-x64 Core Update',
           '2008-x64 Core',
           '2008-x86 Developer Update',
           '2008-x86 Developer',
           '2008-x86 Advanced Update',
           '2008-x86 Advanced',
           '2008-x86 Core Update',
           '2008-x86 Core',
           '2005-x86 Advanced Update',
           '2005-x86 Advanced',
           '2005-x86 Core'
        ]

    runs-on: windows-2019

    env:
      PS1_TROUBLE_SHOOT: On
      SQLSERVERS_MEDIA_FOLDER: 'C:\Sql-Media'
      SQLSERVERS_SETUP_FOLDER: 'C:\Sql-Setup'
      DEBUG_LOG_FOLDER: 'C:\Artifacts'

    steps:
    - name: Bootstrap
      shell: bash
      run: |
         set -eu;
         nohup powershell -c "\$PSVersionTable" &
         wait
         # time powershell -c "Install-Module -Name SqlServer-Version-Management -Force"
         nohup powershell -c "Install-Module -Name SqlServer-Version-Management -Force" &

    
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 888888

    - name: Download Pre-Build artifacts
      uses: actions/download-artifact@v4
      with:
         path: 'C:\Pre-Build'
         merge-multiple: true # just one artifact
         name: Binaries


    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Uninstall LocalDB
      run: |
        # & powershell -f Scripts\Uninstall-LocalDB.ps1
        iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/devizer/Universe.SqlServerJam/master/SqlServer-Version-Management/SqlServer-Version-Management.ps1'))
        Uninstall-LocalDB-List "*"
        cd C:\Pre-Build
        ls


    - name: Install-SqlServer-Version-Management
      run: |
        iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/devizer/Universe.SqlServerJam/master/SqlServer-Version-Management/Install-SqlServer-Version-Management.ps1'))

        # $moduleName = "SqlServer-Version-Management"; Write-Host "Existing `"$moduleName`" module version is $(get-Module -ListAvailable | ? { $_.Name -eq "SqlServer-Version-Management" } | % { "$($_.Version)" })"


    - name: Measure Install-Module
      if: ${{ false }}
      run: |
        iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/devizer/Universe.SqlServerJam/master/SqlServer-Version-Management/SqlServer-Version-Management.ps1'))
        Measure-Action "Install Platform-Info Module" { Install-Module Platform-Info -Force }

    - name: ANSI Colors {{  }}
      run: |
        powershell -f "Scripts\[Test] Ansi Colors.ps1" 

    - name: Show Env
      run: |
        Write-Host "CPU: $(Get-CPU-Name), $([System.Environment]::ProcessorCount) Cores"
        Write-Host "OS: $((Select-WMI-Objects Win32_OperatingSystem | select -Property Caption | Select -First 1).Caption)"
        function Header() { $esc=[char]27; Write-Host "$esc[45;1m $($args) $esc[m" }
        
        Header "(Get-Host).PrivateData"
        (Get-Host).PrivateData
        
        Header "`$PSVersionTable"
        $PSVersionTable | ft -AutoSize
        
        Header "PRE-INSTALLED SQL SERVERS"
        Select-WMI-Objects win32_service | where {$_.Name -Like "MSSQL`$*" } | Format-Table -AutoSize | Out-String -Width 1111
        
        Header "`$PROFILE"
        echo "Profile is [$PROFILE]"
        Get-Content $PROFILE -EA Continue

        Header "PSModulePath Environment Variable"
        Write-Host "`$env:PSModulePath"; $modules="$env:PSModulePath".Split([System.IO.Path]::PathSeparator); $modules | % { if (Test-Path $_) { $dirs=@((new-object System.IO.DirectoryInfo($_)).GetDirectories() | % { $_.Name }); $dirsString = $dirs -join ", "; "Module Path [$_] $($dirs.Count) modules: $($dirsString)"; } else {  "MODULE PATH [$_] ***MISSING***";   }}; Write-Host "`$PSHOME: [$PSHOME]"

        Header "Environment"
        & cmd.exe /c "set|sort"


     
    - name: SETUP Sql Server
      env:
        SQL_SERVERS: ${{ matrix.SqlServers }}
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 25
        max_attempts: 3
        shell: powershell
        retry_wait_seconds: 1
        command: |
              #    - name: Setup Sql Server
              #      env:
              #        SQL_SERVERS: ${{ matrix.SqlServers }}
              #      run: |
              # Scripts\Setup-SqlServers.ps1 -SqlServers "$($ENV:SQL_SERVERS)" "Collation=French_CI_AI" "Startup=Manual" "InstallTo=C:\SQL-Customized" "EmptyKey=" "Password=Meaga`$tr0ng" "/SQLUSERDBDIR=D:\DB {InstanceName} Data" "/SQLUSERDBLOGDIR=C:\SQL LOGS {InstanceName}" "/SQLBACKUPDIR=C:\Backups for {InstanceName}"
              $ENV:PS1_TROUBLE_SHOOT = "On"
              $ENV:SQLSERVERS_MEDIA_FOLDER = "D:\SQL-SETUP\Media"
              $ENV:SQLSERVERS_SETUP_FOLDER = "C:\SQL-SETUP\Installer"
              & setx.exe PS1_TROUBLE_SHOOT On
              & setx.exe SQLSERVERS_MEDIA_FOLDER "$ENV:SQLSERVERS_MEDIA_FOLDER"
              & setx.exe SQLSERVERS_SETUP_FOLDER "$ENV:SQLSERVERS_SETUP_FOLDER"
              Setup-SqlServers -SqlServers "${{ matrix.SqlServers }}" "Collation=French_CI_AI" "Startup=Automatic" "InstallTo=D:\SQL" "EmptyKey=" "Password=Meaga`$tr0ng" "/SQLUSERDBDIR=D:\DB-{InstanceName}-Data" "/SQLUSERDBLOGDIR=D:\SQL-LOGS-{InstanceName}" "/SQLBACKUPDIR=C:\Backups-for-{InstanceName}"

              Write-Line "Starting SQL Server(s)"
              $localSqlServers = @(Find-Local-SqlServers | % {$_.Service})
              if ($localSqlServers) {
                Write-Line -TextDarkGreen "START SERVICES: $localSqlServers" 
                Get-Service -Name @($localSqlServers) | % { if ($_.Status -ne "Running") { Write-Host "Starting $($_.Name)"; Start-Service "$($_.Name)" }}
              }

              Write-Line -TextDarkGreen "Starting SQL Server(s)"
              $servers = Parse-SqlServers-Input "${{ matrix.SqlServers }}"
              $servers | ? { "$($_.InstanceName)" -ne "" } | % {
                $instance = $_.InstanceName;
                $i = IIf ($instance -eq "MSSQLSERVER") "(local)" "(local)\$($instance)"
                Say "Configure instance `"$instance`" Server=$i";
                Set-SQLServer-Options -Title "Instance $instance" -Instance "$i" -Options @{ 
                   "Min Server Memory (MB)" = 8 * 1024; 
                   "Max Server Memory (MB)" = 128 * 1024;
                   XP_CmdShell = $true; 
                   "CLR Enabled" = $true; 
                   "Server Trigger Recursion" = $true; 
                };

                
                $instanceFull = "$((Find-Local-SqlServers | Select -First 1).Instance)"
                if ($instanceFull -and "$($ENV:SQL_SERVERS)" -match "2022") {
                  # Problem is specific for 2022 without CU and MOT
                  $InstanceKey = $instanceFull.Split([char]'\')[1]
                  $instancePath = "SQLSERVER:\SQL\$([Environment]::MachineName)\$InstanceKey"
                  Say "Enable Always On for instance [$instanceFull]: >$instancePath<"
                  try { Enable-SqlAlwaysOn -Force -Path $instancePath; echo ok; }
                  catch { echo $_.Exception; }
                }

                Say "Stress by Stored Procedures"
                Try-And-Retry "Download SQL Server Stress" { & curl.exe "-kfSL" "-o" "Stress-SQL-Server-by-Stored-Procedure.ps1" "https://raw.githubusercontent.com/devizer/Universe.SqlInsights/main/scripts/Stress-SQL-Server-by-Stored-Procedure.ps1" }
                $ENV:STRESS_CONNECTION_STRING="Encrypt=False;Data Source=$instanceFull;Integrated Security=SSPI;"
                .\Stress-SQL-Server-by-Stored-Procedure.ps1
                
                Write-Host "$((Get-Memory-Info).Description)"
              }


    - name: SHOW SQL Servers
      env:
        SQL_SERVERS: ${{ matrix.SqlServers }}
      run: |
       $ENV:SYSTEM_ARTIFACTSDIRECTORY="C:\Temp"
       if (-not ("$($ENV:SQL_SERVERS)" -match "LocalDB")) {
         Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server Local DB\Installed Versions" -Recurse -Force -EA SilentlyContinue
       }
       
       cd Scripts
       & 7z.exe x LocalSqlDiscovery-net4.5.7z -oc:\Temp\ > $null
       cd c:\Temp\LocalSqlDiscovery-net4.5
       $outputFile = "SHOW-SQL-Servers.log"
       & .\SHOW-SQL-Servers.cmd *| tee "$outputFile"
       $mediumVersion = Get-Content "$outputFile" | ? {$_ -match "Medium Version"} | % {$_.Split(":") | Select -Last 1}
       $mediumVersion = "$mediumVersion".Trim()
       $Utf8 = New-Object System.Text.UTF8Encoding $False
       $sqlDef = "{0,-33}" -f "$($ENV:SQL_SERVERS)"
       $mediumVersionFormatted = "{0,-77}" -f "$mediumVersion"
       [System.IO.File]::WriteAllLines("$($ENV:SYSTEM_ARTIFACTSDIRECTORY)\VERSION.LOG", "| $sqlDef | $mediumVersionFormatted |", $utf8)
       [System.IO.File]::WriteAllLines("$($ENV:SYSTEM_ARTIFACTSDIRECTORY)\Medium Version.txt", "$mediumVersion", $utf8)
       
       Get-WmiObject -class "Win32_PageFileUsage" -namespace "root\CIMV2" -computername localhost | Format-Table Caption, Name, PeakUsage, AllocatedBaseSize, CurrentUsage -AutoSize | Out-String -Width 256

       echo "### SQL Medium Version: [$mediumVersion]" > $GITHUB_STEP_SUMMARY
       if ($mediumVersion) { $mediumVersion > "$($ENV:DEBUG_LOG_FOLDER)\Medium Version.txt"; }
       if (-not $mediumVersion) { throw "SQL Server [$($ENV:SQL_SERVERS)] is missing or not responding"; }

       # Put $mediumVersion into json file
       $jsonFile = "$($ENV:DEBUG_LOG_FOLDER)\SQL Setup Benchmark.json"
       $jsonString=[System.IO.File]::ReadAllText($jsonFile)
       $jsonObject = @($jsonString | ConvertFrom-Json) | Select -First 1
       $jsonObject | Add-Member -MemberType NoteProperty -Name "MediumVersion" -Value $mediumVersion
       $jsonObject | ConvertTo-Json > "$jsonFile"

    - name: TEST SqlStorage of SqlInsights
      run: |
        $sqlServers = "${{ matrix.SqlServers }}";
        if (($sqlServers -eq "2022 Core" -or $sqlServers -eq "2022 Advanced")) { 
          $ENV:TESTS_FOR_MOT_DISABLED="True"
          Say "Disabling MOT Tests (weird behaviour) for [$sqlServers]"
        }
        $instance = "$((Find-Local-SqlServers | Select -First 1).Instance)"
        Say "INSTANCE: [$instance]"
        if (-not $instance) { exit 0; }
        $ENV:SQLINSIGHTS_CONNECTION_STRING="TrustServerCertificate=True;Data Source=lpc:$instance;Integrated Security=SSPI;Encrypt=false"
        Say "CONNECTION STRING: [$($ENV:SQLINSIGHTS_CONNECTION_STRING)]"
        $ENV:NUNIT_PIPELINE_KEEP_TEMP_TEST_DATABASES="True"
        $ENV:TEST_CONFIGURATION="DISK";
        $ENV:TEST_CPU_NAME="$(Get-Cpu-Name)"
        cd C:\Pre-Build\Universe.SqlInsights.SqlServerStorage.Tests
        dotnet test Universe.SqlInsights.SqlServerStorage.Tests.dll

    - name: SHOW Query Cache Report
      run: |
        $ENV:SQL_QUERY_CACHE_SUMMARY_1_Cpu_Title="CPU"
        $ENV:SQL_QUERY_CACHE_SUMMARY_1_Cpu_Kind="String"
        $ENV:SQL_QUERY_CACHE_SUMMARY_1_Cpu_Value="$(Get-Cpu-Name)"
        $ENV:SQL_QUERY_CACHE_SUMMARY_1_Cpu_Position="Header"
  
        Try-And-Retry "Git Clone Sql Server Query Cache" { & git clone https://github.com/devizer/Universe.SqlServerQueryCache C:\Temp\QueryCache }
        Say "Building Sql Server Query Cache CLI"
        cd C:\Temp\QueryCache
        git reset --hard
        git clean -xfd
        Measure-Action "Build" { & dotnet build -v:m -c Release -f net6.0 }
        cd Universe.SqlServerQueryCache.CLI
        Measure-Action "Build CLI Release" { & dotnet build -v:m -c Release -f net6.0 }
        Measure-Action "Produce Query Cache Report" { & dotnet run -f net6.0 --no-build --no-launch-profile -c Release -- -all -av -o "C:\Artifacts\Query Cache Reports\{InstanceName}" }
        Say "Done"

    - name: New SHOW SQL Servers
      env:
        SQL_SERVERS: ${{ matrix.SqlServers }}
      run: '& powershell -f "Scripts\[Test] SQL Discovery.ps1"'
      # it restarts sql server, so can be invoked after 'Show Query Cache Report' step


    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: 'Summary ${{ matrix.SqlServers }}'
        path: |
          C:\Artifacts


          
  Combine:
    runs-on: windows-latest
    needs: Setup
    if: always()
    timeout-minutes: 15
    steps:

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v4
      with:
         path: 'C:\Artifacts'

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: 'Combined SQL Server Setup Summary'
        path: |
          C:\Artifacts

