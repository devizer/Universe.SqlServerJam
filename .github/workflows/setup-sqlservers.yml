# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Workflows Intro

on:
  push:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        SqlServers: ["2022 LocalDB", "2022 Developer", "2022 Core"]

    runs-on: windows-latest  

    env:
      PS1_TROUBLE_SHOOT: On
      SQLSERVERS_MEDIA_FOLDER: 'C:\Sql-Media'
      SQLSERVERS_SETUP_FOLDER: 'C:\Sql-Setup'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 888888

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Uninstall LocalDB
      run: '& powershell -f Scripts\Uninstall-LocalDB.ps1'

    - name: Show Env
      run: '& cmd.exe /c "set|sort"'

    - name: Setup Sql Server
      env:
        SQL_SERVERS: ${{ matrix.SqlServers }}
      run: |
        cd Scripts
        & powershell -f Setup-SqlServers.ps1 -SqlServers "$($ENV:SQL_SERVERS)"

