name: Setup SQL Servers

on:
  push:
    branches: [ "master" ]

defaults:
  run:
    shell: powershell

jobs:

  Setup:

    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        SqlServers: [
           # '2022 Developer, 2008 Core, 2005 Core',
           # '2022 Developer, 2019 Developer, 2017 Developer, 2016 Developer',
           # '2022 Developer Update, 2019 Developer Update, 2017 Developer Update, 2016 Developer Update',
           '2022 Developer Update',
           '2022 Developer',
           '2022 Advanced Update',
           '2022 Advanced',
           '2022 Core Update',
           '2022 Core',
           '2022 LocalDB',
           '2019 Developer Update',
           '2019 Developer',
           '2019 Advanced Update',
           '2019 Advanced',
           '2019 Core Update',
           '2019 Core',
           '2019 LocalDB',
           '2017 Developer Update',
           '2017 Developer',
           '2017 Advanced Update',
           '2017 Advanced',
           '2017 Core Update',
           '2017 Core',
           '2017 LocalDB',
           '2016 Developer Update',
           '2016 Developer',
           '2016 Advanced Update',
           '2016 Advanced',
           '2016 Core Update',
           '2016 Core',
           '2016 LocalDB',
           '2014-x64 Developer',
           '2014-x64 Advanced',
           '2014-x64 Core',
           '2014-x64 LocalDB',
           '2014-x86 Developer', 
           '2014-x86 Advanced',
           '2014-x86 Core',
           '2014-x86 LocalDB',
           '2012-x64 Developer',
           '2012-x64 Advanced',
           '2012-x64 Core',
           '2012-x64 LocalDB',
           '2012-x86 Developer',
           '2012-x86 Advanced',
           '2012-x86 Core',
           '2012-x86 LocalDB',
           '2008R2-x64 Developer',
           '2008R2-x64 Advanced Update',
           '2008R2-x64 Advanced',
           '2008R2-x64 Core Update',
           '2008R2-x64 Core',
           '2008R2-x86 Developer',
           '2008R2-x86 Advanced Update',
           '2008R2-x86 Advanced',
           '2008R2-x86 Core Update',
           '2008R2-x86 Core',
           '2008-x64 Developer Update',
           '2008-x64 Developer',
           '2008-x64 Advanced Update',
           '2008-x64 Advanced',
           '2008-x64 Core Update',
           '2008-x64 Core',
           '2008-x86 Developer Update',
           '2008-x86 Developer',
           '2008-x86 Advanced Update',
           '2008-x86 Advanced',
           '2008-x86 Core Update',
           '2008-x86 Core',
           '2005-x86 Advanced Update',
           '2005-x86 Advanced',
           '2005-x86 Core'
        ]

    runs-on: windows-2019

    env:
      PS1_TROUBLE_SHOOT: On
      SQLSERVERS_MEDIA_FOLDER: 'C:\Sql-Media'
      SQLSERVERS_SETUP_FOLDER: 'C:\Sql-Setup'
      DEBUG_LOG_FOLDER: 'C:\Artifacts'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 888888

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Uninstall LocalDB
      run: |
        # & powershell -f Scripts\Uninstall-LocalDB.ps1
        iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/devizer/Universe.SqlServerJam/master/SqlServer-Version-Management/SqlServer-Version-Management.ps1'))
        Uninstall-LocalDB-List "*"


    - name: Install-SqlServer-Version-Management
      run: |
        iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/devizer/Universe.SqlServerJam/master/SqlServer-Version-Management/Install-SqlServer-Version-Management.ps1'))


    - name: Measure Install-Module
      if: ${{ false }}
      run: |
        iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/devizer/Universe.SqlServerJam/master/SqlServer-Version-Management/SqlServer-Version-Management.ps1'))
        Measure-Action "Install Platform-Info Module" { Install-Module Platform-Info -Force }


    - name: Show Env
      run: |
        Write-Host "CPU: $(Get-CPU-Name), $([System.Environment]::ProcessorCount) Cores"
        Write-Host "OS: $((Select-WMI-Objects Win32_OperatingSystem | select -Property Caption | Select -First 1).Caption)"
        function Header() { $esc=[char]27; Write-Host "$esc[41;1m $($args) $esc[m" }
        
        Header "(Get-Host).PrivateData"
        (Get-Host).PrivateData
        
        Header "`$PSVersionTable"
        $PSVersionTable | ft -AutoSize
        Select-WMI-Objects win32_service | where {$_.Name -Like "MSSQL`$*" } | Format-Table -AutoSize | Out-String -Width 1111
        
        Header "Environment"
        & cmd.exe /c "set|sort"

        Header "`$PROFILE"
        echo "Profile is [$PROFILE]"
        Get-Content $PROFILE -EA Continue

        Header "PSModulePath Environment Variable"
        Write-Host "`$env:PSModulePath"; $modules="$env:PSModulePath".Split([System.IO.Path]::PathSeparator); $modules | % { if (Test-Path $_) { $dirs=@((new-object System.IO.DirectoryInfo($_)).GetDirectories() | % { $_.Name }); $dirsString = $dirs -join ", "; "Module Path [$_] $($dirs.Count) modules: $($dirsString)"; } else {  "MODULE PATH [$_] ***MISSING***";   }}; Write-Host "`$PSHOME: [$PSHOME]"


    - name: Setup Sql Server
      env:
        SQL_SERVERS: ${{ matrix.SqlServers }}
      run: |
         # Scripts\Setup-SqlServers.ps1 -SqlServers "$($ENV:SQL_SERVERS)" "Collation=French_CI_AI" "Startup=Manual" "InstallTo=C:\SQL-Customized" "EmptyKey=" "Password=Meaga`$tr0ng" "/SQLUSERDBDIR=D:\DB {InstanceName} Data" "/SQLUSERDBLOGDIR=C:\SQL LOGS {InstanceName}" "/SQLBACKUPDIR=C:\Backups for {InstanceName}"
         Setup-SqlServers -SqlServers "$($ENV:SQL_SERVERS)" "Collation=French_CI_AI" "Startup=Manual" "InstallTo=C:\SQL-Customized" "EmptyKey=" "Password=Meaga`$tr0ng" "/SQLUSERDBDIR=D:\DB {InstanceName} Data" "/SQLUSERDBLOGDIR=C:\SQL LOGS {InstanceName}" "/SQLBACKUPDIR=C:\Backups for {InstanceName}"


    - name: NEW Show SQL Servers
      env:
        SQL_SERVERS: ${{ matrix.SqlServers }}
      run: '& powershell -f "Scripts\[Test] SQL Discovery.ps1"'

    - name: Show SQL Servers
      env:
        SQL_SERVERS: ${{ matrix.SqlServers }}
      run: |
       $ENV:SYSTEM_ARTIFACTSDIRECTORY="C:\Temp"
       if (-not ("$($ENV:SQL_SERVERS)" -match "LocalDB")) {
         Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server Local DB\Installed Versions" -Recurse -Force -EA SilentlyContinue
       }
       
       cd Scripts
       & 7z.exe x LocalSqlDiscovery-net4.5.7z -oc:\Temp\ > $null
       cd c:\Temp\LocalSqlDiscovery-net4.5
       $outputFile = "SHOW-SQL-Servers.log"
       & .\SHOW-SQL-Servers.cmd *| tee "$outputFile"
       $mediumVersion = Get-Content "$outputFile" | ? {$_ -match "Medium Version"} | % {$_.Split(":") | Select -Last 1}
       $mediumVersion = "$mediumVersion".Trim()
       $Utf8 = New-Object System.Text.UTF8Encoding $False
       $sqlDef = "{0,-33}" -f "$($ENV:SQL_SERVERS)"
       $mediumVersionFormatted = "{0,-77}" -f "$mediumVersion"
       [System.IO.File]::WriteAllLines("$($ENV:SYSTEM_ARTIFACTSDIRECTORY)\VERSION.LOG", "| $sqlDef | $mediumVersionFormatted |", $utf8)
       [System.IO.File]::WriteAllLines("$($ENV:SYSTEM_ARTIFACTSDIRECTORY)\Medium Version.txt", "$mediumVersion", $utf8)
       
       Get-WmiObject -class "Win32_PageFileUsage" -namespace "root\CIMV2" -computername localhost | Format-Table Caption, Name, PeakUsage, AllocatedBaseSize, CurrentUsage -AutoSize | Out-String -Width 256

       echo "### SQL Medium Version: [$mediumVersion]" > $GITHUB_STEP_SUMMARY
       if ($mediumVersion) { $mediumVersion > "$($ENV:DEBUG_LOG_FOLDER)\Medium Version.txt"; }
       if (-not $mediumVersion) { throw "SQL Server [$($ENV:SQL_SERVERS)] is missing or not responding"; }

       # Put $mediumVersion into json file
       $jsonFile = "$($ENV:DEBUG_LOG_FOLDER)\SQL Setup Benchmark.json"
       $jsonString=[System.IO.File]::ReadAllText($jsonFile)
       $jsonObject = @($jsonString | ConvertFrom-Json) | Select -First 1
       $jsonObject | Add-Member -MemberType NoteProperty -Name "MediumVersion" -Value $mediumVersion
       $jsonObject | ConvertTo-Json > "$jsonFile"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: 'Summary ${{ matrix.SqlServers }}'
        path: |
          C:\Artifacts


          
  Combine:
    runs-on: windows-latest
    needs: Setup
    if: always()
    timeout-minutes: 15
    steps:

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v4
      with:
         path: 'C:\Artifacts'

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: 'Combined SQL Server Setup Summary'
        path: |
          C:\Artifacts

